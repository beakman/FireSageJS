import { push as push_ } from 'firebase/database'
import {
	Push,
	MetaType,
	DatabaseReference,
	FindNestedType,
	ErrorNotPushAble,
} from '../types'
/**
Generates a new child location using a unique key and returns its Reference.

This is the most common pattern for adding data to a collection of items.

If you provide a value to push(), the value is written to the generated location. If you don't pass a value, nothing is written to the database and the child remains empty (but you can use the Reference elsewhere).

The unique keys generated by push() are ordered by the current time, so the resulting list of items is chronologically sorted. The keys are also designed to be unguessable (they contain 72 random bits of entropy).

See | Append to a list of data See ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers

@param parent — The parent location.

@param value — Optional value to be written at the generated location.

@returns
Combined Promise and Reference; resolves when write is complete, but can be used immediately as the Reference to the child location.
 */
export const push = <
	T extends MetaType,
	U extends (keyof T['flatten_base'] & string) | undefined
>(
	ref: DatabaseReference<T, U> extends never
		? DatabaseReference<T, U>
		: FindNestedType<T, U, 'base'> extends Push<any>
		? DatabaseReference<T, U>
		: ErrorNotPushAble<U>,
	value: FindNestedType<T, U, 'base'> extends Push<any>
		? FindNestedType<T, U, 'base'>['FireSage.PushValue']
		: ErrorNotPushAble<U>
) => {
	return push_(ref as any, value)
}
